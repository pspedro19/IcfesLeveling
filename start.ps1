# ICFES LEVELING - Quick Start Script for Windows
# Este script levanta todo el sistema de microservicios

Write-Host "üéÆ ICFES LEVELING - Iniciando sistema completo..." -ForegroundColor Green
Write-Host "==================================================" -ForegroundColor Green

# Verificar que Docker est√© corriendo
try {
    docker info | Out-Null
    Write-Host "‚úÖ Docker verificado" -ForegroundColor Green
} catch {
    Write-Host "‚ùå Error: Docker no est√° corriendo. Por favor inicia Docker Desktop primero." -ForegroundColor Red
    exit 1
}

# Verificar que Docker Compose est√© disponible
try {
    docker-compose --version | Out-Null
    Write-Host "‚úÖ Docker Compose verificado" -ForegroundColor Green
} catch {
    Write-Host "‚ùå Error: Docker Compose no est√° disponible." -ForegroundColor Red
    exit 1
}

# Crear archivo .env si no existe
if (-not (Test-Path ".env")) {
    Write-Host "üìù Creando archivo .env desde env.example..." -ForegroundColor Yellow
    Copy-Item "env.example" ".env"
    Write-Host "‚úÖ Archivo .env creado. Puedes editarlo si necesitas configurar OpenAI API." -ForegroundColor Green
}

# Detener contenedores existentes
Write-Host "üõë Deteniendo contenedores existentes..." -ForegroundColor Yellow
docker-compose down

# Limpiar recursos no utilizados
Write-Host "üßπ Limpiando recursos no utilizados..." -ForegroundColor Yellow
docker system prune -f

# Construir y levantar servicios
Write-Host "üî® Construyendo y levantando servicios..." -ForegroundColor Yellow
docker-compose up --build -d

# Esperar a que los servicios est√©n listos
Write-Host "‚è≥ Esperando a que los servicios est√©n listos..." -ForegroundColor Yellow
Start-Sleep -Seconds 30

# Verificar estado de los servicios
Write-Host "üîç Verificando estado de los servicios..." -ForegroundColor Yellow
docker-compose ps

# Verificar endpoints
Write-Host "üåê Verificando endpoints..." -ForegroundColor Yellow
Write-Host ""

# Backend API
try {
    $response = Invoke-WebRequest -Uri "http://localhost:8000/health" -UseBasicParsing -TimeoutSec 5
    Write-Host "‚úÖ Backend API: http://localhost:8000" -ForegroundColor Green
} catch {
    Write-Host "‚ùå Backend API: No responde" -ForegroundColor Red
}

# AI Service
try {
    $response = Invoke-WebRequest -Uri "http://localhost:8002/health" -UseBasicParsing -TimeoutSec 5
    Write-Host "‚úÖ AI Service: http://localhost:8002" -ForegroundColor Green
} catch {
    Write-Host "‚ùå AI Service: No responde" -ForegroundColor Red
}

# Frontend
try {
    $response = Invoke-WebRequest -Uri "http://localhost:3000" -UseBasicParsing -TimeoutSec 5
    Write-Host "‚úÖ Frontend: http://localhost:3000" -ForegroundColor Green
} catch {
    Write-Host "‚ùå Frontend: No responde (puede tardar m√°s en cargar)" -ForegroundColor Yellow
}

Write-Host ""
Write-Host "üéâ ¬°Sistema iniciado exitosamente!" -ForegroundColor Green
Write-Host "==================================================" -ForegroundColor Green
Write-Host ""
Write-Host "üì± Acceso a los servicios:" -ForegroundColor Cyan
Write-Host "   ‚Ä¢ Frontend: http://localhost:3000" -ForegroundColor White
Write-Host "   ‚Ä¢ Backend API: http://localhost:8000" -ForegroundColor White
Write-Host "   ‚Ä¢ AI Service: http://localhost:8002" -ForegroundColor White
Write-Host "   ‚Ä¢ WebSocket: ws://localhost:8001" -ForegroundColor White
Write-Host ""
Write-Host "üìä Base de datos:" -ForegroundColor Cyan
Write-Host "   ‚Ä¢ PostgreSQL: localhost:5432" -ForegroundColor White
Write-Host "   ‚Ä¢ Redis: localhost:6379" -ForegroundColor White
Write-Host "   ‚Ä¢ ClickHouse: localhost:8123" -ForegroundColor White
Write-Host ""
Write-Host "üë• Usuarios de prueba:" -ForegroundColor Cyan
Write-Host "   ‚Ä¢ shadow_hunter / password123 (Level 25, Rank B)" -ForegroundColor White
Write-Host "   ‚Ä¢ math_master / password123 (Level 18, Rank C)" -ForegroundColor White
Write-Host "   ‚Ä¢ newbie_student / password123 (Level 1, Rank E)" -ForegroundColor White
Write-Host ""
Write-Host "üìã Comandos √∫tiles:" -ForegroundColor Cyan
Write-Host "   ‚Ä¢ Ver logs: docker-compose logs -f" -ForegroundColor White
Write-Host "   ‚Ä¢ Ver logs de un servicio: docker-compose logs -f frontend" -ForegroundColor White
Write-Host "   ‚Ä¢ Reiniciar un servicio: docker-compose restart backend" -ForegroundColor White
Write-Host "   ‚Ä¢ Detener todo: docker-compose down" -ForegroundColor White
Write-Host ""
Write-Host "üîß Para desarrollo:" -ForegroundColor Cyan
Write-Host "   ‚Ä¢ Edita .env para configurar OpenAI API" -ForegroundColor White
Write-Host "   ‚Ä¢ Los cambios en el c√≥digo se reflejan autom√°ticamente" -ForegroundColor White
Write-Host "   ‚Ä¢ Usa docker-compose exec para ejecutar comandos dentro de contenedores" -ForegroundColor White
Write-Host ""
Write-Host "üéÆ ¬°Disfruta aprendiendo mientras combates enemigos acad√©micos!" -ForegroundColor Green 